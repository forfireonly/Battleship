type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Coordinates.java
  visible: true
  text: |
    package battleship;

    import java.util.HashMap;

    public class Coordinates {
        private String firstCoordinateLetter;
        private String firstCoordinateNumber;
        private String secondCoordinateLetter;
        private String secondCoordinateNumber;

        public static HashMap<String, Integer> letterColum = createMap();
        private static HashMap<String, Integer> createMap() {

            HashMap<String,Integer> letterColum = new HashMap<>();

            letterColum.put("A",0);
            letterColum.put("B",1);
            letterColum.put("C",2);
            letterColum.put("D",3);
            letterColum.put("E",4);
            letterColum.put("F",5);
            letterColum.put("G",6);
            letterColum.put("H",7);
            letterColum.put("I",8);
            letterColum.put("J",9);

            return letterColum;
        }

        public void setFirstCoordinateLetter(String firstCoordinateLetter) {
            this.firstCoordinateLetter = firstCoordinateLetter;
        }

        public void setFirstCoordinateNumber(String firstCoordinateNumber) {
            this.firstCoordinateNumber = firstCoordinateNumber;
        }

        public  void setSecondCoordinateLetter(String secondCoordinateLetter) {
            this.secondCoordinateLetter = secondCoordinateLetter;
        }

        public void setSecondCoordinateNumber(String secondCoordinateNumber) {
            this.secondCoordinateNumber = secondCoordinateNumber;
        }

        public String getFirstCoordinateLetter() {
            return firstCoordinateLetter;
        }

        public String getFirstCoordinateNumber() {
            return firstCoordinateNumber;
        }

        public String getSecondCoordinateLetter() {
            return secondCoordinateLetter;
        }

        public String getSecondCoordinateNumber() {
            return secondCoordinateNumber;
        }

        public boolean checkLength(String shipType) {

            boolean isCorrectLength = false;
            int firstCoordinate = Integer.parseInt(firstCoordinateNumber);
            int secondCoordinate = Integer.parseInt(secondCoordinateNumber);
            //System.out.println(firstCoordinate);
            //System.out.println(secondCoordinate);
            int lengthOfShip = 0;
            if (firstCoordinate !=secondCoordinate && !firstCoordinateLetter.equals(secondCoordinateLetter)) {
                System.out.println();
                System.out.println("Error! Wrong ship location! Try again:");
                System.out.println();
            } else {
                if (firstCoordinateLetter.equals(secondCoordinateLetter)) {
                    lengthOfShip = Math.abs(secondCoordinate - firstCoordinate) + 1;
                } else {
                   lengthOfShip = Math.abs(letterColum.get(firstCoordinateLetter) - letterColum.get(secondCoordinateLetter)) + 1;

                }
                //System.out.println(lengthOfShip);
                switch (shipType) {
                    case "carrier":
                        if (lengthOfShip == 5) {
                            isCorrectLength = true;
                        } else {
                            System.out.println();
                            System.out.println("Error! Wrong length of the Carrier! Try again:\n");
                        }
                        break;
                    case "battleship":
                        if (lengthOfShip == 4) {
                            isCorrectLength = true;
                        } else {
                            System.out.println();
                            System.out.println("Error! Wrong length of the Battleship! Try again:\n");
                        }
                        break;
                    case "submarine":
                        if (lengthOfShip == 3) {
                            isCorrectLength = true;
                        } else {
                            System.out.println();
                            System.out.println("Error! Wrong length of the Submarine! Try again:\n");
                        }
                        break;
                    case "cruiser":
                        if (lengthOfShip == 3) {
                            isCorrectLength = true;
                        } else {
                            System.out.println();
                            System.out.println("Error! Wrong length of the Cruiser! Try again:\n");
                        }
                        break;
                    case "destroyer":
                        if (lengthOfShip == 2) {
                            isCorrectLength = true;
                        } else {
                            System.out.println();
                            System.out.println("Error! Wrong length of the Destroyer! Try again:\n");
                        }
                        break;
                    default:

                }
            }
        return isCorrectLength;
        }
    }
  learner_created: true
- name: src/battleship/GameField.java
  visible: true
  text: |+
    package battleship;

    import java.io.IOException;

    public class GameField {
        static String[] letters = {"A ", "B ", "C ", "D ", "E ", "F ", "G ", "H ", "I ", "J "};
        public String[][] field = new String[10][10];
        public String[][] fieldInFog = new String[10][10];
        int isSunk = 0;

        Coordinates coordinates = new Coordinates();

        public String[][] forbidenCoordinates = new String[12][12];
        public String[][] sunkenShips = new String[12][12];

        int shipCount = 17;

        public void play() throws IOException {
            System.out.println();
            System.out.println("Take a shot!");
            System.out.println();
            while (shipCount > 0) {
                runGame();
            }
            System.out.println();
            System.out.println("You sank the last ship. You won. Congratulations!");
        }

        public int checkSunk(int x, int y) {
            int numberNeighbors = 0;

            if (sunkenShips[x - 1][y].equals("O ")) {
                numberNeighbors += 1;
            }
            if (sunkenShips[x][y - 1].equals("O ")) {
                numberNeighbors += 1;
            }
            if (sunkenShips[x][y + 1].equals("O ")) {
                numberNeighbors += 1;
            }
            if (sunkenShips[x + 1][y].equals("O ")) {
                numberNeighbors += 1;
            }
            return numberNeighbors;
        }

        /*public boolean checkSunk(int x, int y) {
            boolean isSunk = true;

            if (sunkenShips[x - 1][y].equals("O ") || sunkenShips[x][y - 1].equals("O ") ||
                    sunkenShips[x][y + 1].equals("O ") || sunkenShips[x + 1][y].equals("O ")) {
                isSunk = false;
            }
            return isSunk;
        }*/

        public void runGame() throws IOException {
            boolean isRight = false;
            String[] coordinates = new String[2];
            String letter = "";
            int number = 0;

            while (!isRight) {
                coordinates = Main.reader.readLine().split("");
                letter = coordinates[0];
                if (coordinates.length == 2) {
                    number = Integer.parseInt(coordinates[1]);
                } else if (coordinates.length == 3) {
                    number = Integer.parseInt(coordinates[1] + coordinates[2]);
                }

                if (letter.matches("[A-J]") && number > 0 && number < 11) {
                    isRight = true;
                } else {
                    System.out.println();
                    System.out.println("Error! You entered the wrong coordinates! Try again: ");
                    System.out.println();
                }
            }
            if (field[Coordinates.letterColum.get(letter)][number - 1].equals("O ")) {

                fieldInFog[Coordinates.letterColum.get(letter)][number - 1] = "X ";
                field[Coordinates.letterColum.get(letter)][number - 1] = "X ";
                sunkenShips[Coordinates.letterColum.get(letter) + 1][number - 1 + 1] = "X ";
                int x = Coordinates.letterColum.get(letter) + 1;
                int y = number - 1 + 1;
                System.out.println();
                displayFieldOfWar();
                isSunk += checkSunk(x, y);
                shipCount -= 1;
                if (isSunk > 0) {
                    System.out.println();
                    System.out.println("You hit a ship! Try again:");
                    System.out.println();
                    isSunk -= 1;
                } else {
                    System.out.println();
                    System.out.println("You sank a ship! Specify a new target: ");
                    System.out.println();
                }
            } else if (field[Coordinates.letterColum.get(letter)][number - 1].equals("~ ")) {
                fieldInFog[Coordinates.letterColum.get(letter)][number - 1] = "M ";
                field[Coordinates.letterColum.get(letter)][number - 1] = "M ";
                System.out.println();
                displayFieldOfWar();
                System.out.println();
                System.out.println("You missed! Try again: ");
                System.out.println();
            } else if (field[Coordinates.letterColum.get(letter)][number - 1].equals("X ")) {
                System.out.println();
                displayFieldOfWar();
                System.out.println();
                System.out.println("Error! You hit a ship! Try again: ");
                System.out.println();
            }
        }

        public void fillForbiden() {
            for (int i = 0; i < forbidenCoordinates.length; i++) {
                for (int j = 0; j < forbidenCoordinates.length; j++) {
                    forbidenCoordinates[i][j] = "~";
                    sunkenShips[i][j] = "~";
                }
            }
        }

        public void createOriginalField() {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    field[i][j] = "~ ";
                    fieldInFog[i][j] = "~ ";
                }
            }
        }

        public void displayFieldOfWar() {
            System.out.println();
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < 10; i++) {
                System.out.print(letters[i]);
                for (int j = 0; j < 10; j++) {
                    System.out.print(fieldInFog[i][j]);
                }
                System.out.println();
            }
        }

        public void displayField() {
            System.out.println();
            System.out.println("  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < 10; i++) {
                System.out.print(letters[i]);
                for (int j = 0; j < 10; j++) {
                    System.out.print(field[i][j]);
                }
                System.out.println();
            }
        }


        public void inputSetcoordinates(Coordinates coordinates) throws IOException {
            String[] airacraftCarierTwoCoordinates = Main.reader.readLine().split(" ");
            String[] firstCoordinate = airacraftCarierTwoCoordinates[0].split("");
            if (firstCoordinate.length == 3 && firstCoordinate[1].equals("1")) {
                firstCoordinate[1] = "10";
            }
            String[] secondCoordinate = airacraftCarierTwoCoordinates[1].split("");
            if (secondCoordinate.length == 3 && secondCoordinate[1].equals("1")) {
                secondCoordinate[1] = "10";
            }
            coordinates.setFirstCoordinateLetter(firstCoordinate[0]);
            coordinates.setFirstCoordinateNumber(firstCoordinate[1]);
            coordinates.setSecondCoordinateLetter(secondCoordinate[0]);
            coordinates.setSecondCoordinateNumber(secondCoordinate[1]);
        }

        public void setCarrier() throws IOException {
            boolean isCorrect = false;

            System.out.println();
            System.out.println("Enter the coordinates of the Aircraft Carrier (5 cells):\n");

            while (!isCorrect) {
                inputSetcoordinates(coordinates);
                isCorrect = coordinates.checkLength("carrier");
            }
        }

        public void setBattleship() throws IOException {
            boolean isCorrect = false;

            System.out.println();
            System.out.println("Enter the coordinates of the Battleship (4 cells):\n");

            while (!isCorrect) {
                inputSetcoordinates(coordinates);
                isCorrect = coordinates.checkLength("battleship") && checkProximity();

            }
        }

        public void setSubmarine() throws IOException {
            boolean isCorrect = false;

            System.out.println();
            System.out.println("Enter the coordinates of the Submarine  (3 cells):\n");

            while (!isCorrect) {
                inputSetcoordinates(coordinates);
                isCorrect = coordinates.checkLength("submarine") && checkProximity();
            }
        }

        public void setCruiser() throws IOException {
            boolean isCorrect = false;

            System.out.println();
            System.out.println("Enter the coordinates of the Cruiser  (3 cells):\n");

            while (!isCorrect) {
                inputSetcoordinates(coordinates);
                isCorrect = coordinates.checkLength("cruiser") && checkProximity();
            }
        }

        public void setDestroyer() throws IOException {
            boolean isCorrect = false;

            System.out.println();
            System.out.println("Enter the coordinates of the Destroyer (2 cells):\n");

            while (!isCorrect) {
                inputSetcoordinates(coordinates);
                isCorrect = coordinates.checkLength("destroyer") && checkProximity();
            }
        }

        public void setTheField() {

            String firstCoordinateLetter = coordinates.getFirstCoordinateLetter();
            String firstCoordinateNumber = coordinates.getFirstCoordinateNumber();

            String secondCoordinateLetter = coordinates.getSecondCoordinateLetter();
            String secondCoordinateNumber = coordinates.getSecondCoordinateNumber();

            int firstCoordinateFirst = Coordinates.letterColum.get(firstCoordinateLetter);
            int firstCoordinateSecond = Integer.parseInt(firstCoordinateNumber) - 1;
            int secondCoordinateFirst = Coordinates.letterColum.get(secondCoordinateLetter);
            int secondCoordinateSecond = Integer.parseInt(secondCoordinateNumber) - 1;
            int holder = 0;

            if (secondCoordinateFirst < firstCoordinateFirst) {
                holder = secondCoordinateFirst;
                secondCoordinateFirst = firstCoordinateFirst;
                firstCoordinateFirst = holder;
            }

            if (secondCoordinateSecond < firstCoordinateSecond) {
                holder = secondCoordinateSecond;
                secondCoordinateSecond = firstCoordinateSecond;
                firstCoordinateSecond = holder;
            }

            if (firstCoordinateLetter.equals(secondCoordinateLetter)) {
                for (int i = firstCoordinateSecond; i <= secondCoordinateSecond; i++) {
                    int y = i + 1;
                    int x = firstCoordinateFirst + 1;
                    field[firstCoordinateFirst][i] = "O ";
                    sunkenShips[x][y] = "O ";
                    forbidenCoordinates[x][y] = "F";
                    forbidenCoordinates[x - 1][y - 1] = "F";
                    forbidenCoordinates[x - 1][y] = "F";
                    forbidenCoordinates[x - 1][y + 1] = "F";
                    forbidenCoordinates[x][y - 1] = "F";
                    forbidenCoordinates[x][y + 1] = "F";
                    forbidenCoordinates[x + 1][y - 1] = "F";
                    forbidenCoordinates[x + 1][y] = "F";
                    forbidenCoordinates[x + 1][y + 1] = "F";
                }
            } else {
                for (int i = firstCoordinateFirst; i <= secondCoordinateFirst; i++) {
                    int x = i + 1;
                    int y = firstCoordinateSecond + 1;
                    field[i][firstCoordinateSecond] = "O ";
                    sunkenShips[x][y] = "O ";
                    forbidenCoordinates[i][firstCoordinateSecond] = "F";
                    forbidenCoordinates[x - 1][y - 1] = "F";
                    forbidenCoordinates[x - 1][y] = "F";
                    forbidenCoordinates[x - 1][y + 1] = "F";
                    forbidenCoordinates[x][y - 1] = "F";
                    forbidenCoordinates[x][y + 1] = "F";
                    forbidenCoordinates[x + 1][y - 1] = "F";
                    forbidenCoordinates[x + 1][y] = "F";
                    forbidenCoordinates[x + 1][y + 1] = "F";
                }
            }
        }

        public boolean checkProximity() {

            boolean isFar = true;

            String firstCoordinateLetter = coordinates.getFirstCoordinateLetter();
            String firstCoordinateNumber = coordinates.getFirstCoordinateNumber();

            String secondCoordinateLetter = coordinates.getSecondCoordinateLetter();
            String secondCoordinateNumber = coordinates.getSecondCoordinateNumber();

            int firstCoordinateFirst = Coordinates.letterColum.get(firstCoordinateLetter);
            int firstCoordinateSecond = Integer.parseInt(firstCoordinateNumber) - 1;
            int secondCoordinateFirst = Coordinates.letterColum.get(secondCoordinateLetter);
            int secondCoordinateSecond = Integer.parseInt(secondCoordinateNumber) - 1;
            int holder = 0;

            if (secondCoordinateFirst < firstCoordinateFirst) {
                holder = secondCoordinateFirst;
                secondCoordinateFirst = firstCoordinateFirst;
                firstCoordinateFirst = holder;
            }

            if (secondCoordinateSecond < firstCoordinateSecond) {
                holder = secondCoordinateSecond;
                secondCoordinateSecond = firstCoordinateSecond;
                firstCoordinateSecond = holder;
            }
            if (forbidenCoordinates[firstCoordinateFirst + 1][firstCoordinateSecond + 1].equals("F") ||
                    forbidenCoordinates[secondCoordinateFirst + 1][secondCoordinateSecond + 1].equals("F")) {
                isFar = false;
                System.out.println();
                System.out.println("Error! You placed it too close to another one. Try again: ");
                System.out.println();
            }
            return isFar;
        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/667/implement">JetBrains
    Academy</a>
  time: Sun, 01 Nov 2020 23:22:03 UTC
record: 5
